    int helper(vector<int>& nums, int target,int l, int r){
        while(l<=r){
            int m = l+(r-l)/2;
            if(nums[m]<target){
                l = m+1;
            }else if(nums[m]>target){
                r = m-1;
            }else{//nums[m]==target
                return m;
            }
        }
        return -1;
    }
    
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int ret=false;
        for(int i=0; i<matrix.size(); i++){
            if(target > matrix[i][matrix[i].size()-1]){
                continue;
            }
            else {// if(target<=matrix[i][matrix[i].size()-1])
                int l = 0;
                int r = matrix[i].size()-1;
                if(helper(matrix[i],target, l, r)==-1){
                    return false;
                }else{
                    return true;
                }
            }
        }
        return false;
    }
//========================================================
bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty()) return false;
        int r = matrix.size();
        int c = matrix[0].size();
        int i=0;
        int j = c-1;
        while(i<r && j>=0)    
        if(target > matrix[i][j]){
            i++;
        }else if(target < matrix[i][j]){
            j--;
        }else{//target==matrix[i][j]
            return true;
        }
        return false;
    }
    
